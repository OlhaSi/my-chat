{"version":3,"sources":["modules/chat/chat-content/chat-content.module.css","modules/left-side/contacts/contacts.module.css","modules/left-side/search-bar/search-bar.module.css","modules/chat/message-bar/message-bar.module.css","modules/left-side/left-side.module.css","components/avatar/avatar.module.css","modules/chat/chat.module.css","modules/chat/header/header.module.css","App.module.css","modules/left-side/search-bar/search-bar.js","components/avatar/avatar.js","modules/left-side/contacts/contacts.js","modules/left-side/left-side.js","modules/chat/header/header.js","modules/chat/chat-content/chat-content.js","services/mc-service.js","modules/chat/message-bar/message-bar.js","modules/chat/chat.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","SearchBar","onFilter","onSearch","useCallback","e","target","value","className","styles","searchBarContainer","avatar","size","color","searchInput","searchInputText","placeholder","type","onChange","Avatar","src","alt","Contacts","chatsArray","activeChat","setActiveChat","handleClick","chat","contactsContainer","map","msec","person","messages","messageContainer","id","messageContainerActive","onClick","contentWrapper","icon","content","name","length","message","date","timestamp","Date","toDateString","LeftSide","useState","filteredList","setFilteredList","useEffect","searchInputValue","filtered","forEach","toLowerCase","includes","push","containerLeftSide","Header","headerContainer","formatTime","toLocaleString","ChatContent","chatContainer","msgObj","receivedWrapper","messageDetails","textReceived","timeReceived","sentWrapper","textSent","timeSent","a","fetch","MessageBar","addNewMessage","input","useRef","joke","setJoke","pId","getJokes","setTimeout","getRandomJoke","then","r","json","resp","current","addMsgHandler","onKeyDown","key","sendInput","ref","sendInputText","Chat","container","STORAGE_ID","localChatsString","localStorage","getItem","localChats","JSON","parse","undefined","App","ChatData","chats","setChatsArray","onChatsUpdate","updatedChats","sortResults","sort","b","chatsSort","setItem","stringify","nextActiveChat","find","msg","msgType","personID","chatData","newMessage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d0136da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"chat-content_chatContainer__Amo5g\",\"receivedWrapper\":\"chat-content_receivedWrapper__cEnNO\",\"sentWrapper\":\"chat-content_sentWrapper__2UNj-\",\"messageDetails\":\"chat-content_messageDetails__1-ksd\",\"textReceived\":\"chat-content_textReceived__1oWZV\",\"textSent\":\"chat-content_textSent__2Cakc\",\"timeReceived\":\"chat-content_timeReceived__36cq5\",\"timeSent\":\"chat-content_timeSent__1Dlfn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsContainer\":\"contacts_contactsContainer__38Fq7\",\"messageContainer\":\"contacts_messageContainer__KChwu\",\"messageContainerActive\":\"contacts_messageContainerActive__28FtB\",\"contentWrapper\":\"contacts_contentWrapper__2TyLV\",\"content\":\"contacts_content__9CC3S\",\"message\":\"contacts_message__3FSZf\",\"date\":\"contacts_date__2kKnx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"search-bar_avatar__2Pe8A\",\"searchBarContainer\":\"search-bar_searchBarContainer__3Vlhi\",\"searchInput\":\"search-bar_searchInput__11KSw\",\"searchInputText\":\"search-bar_searchInputText__19xxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageContainer\":\"message-bar_messageContainer__3YW3M\",\"sendInput\":\"message-bar_sendInput__3GB7G\",\"sendInputText\":\"message-bar_sendInputText__3h5xu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerLeftSide\":\"left-side_containerLeftSide__1iSe-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"avatar_avatar__1QlmY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chat_container__2lJ3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"header_headerContainer__2UoPr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React, { useCallback } from \"react\";\nimport styles from \"./search-bar.module.css\";\n\nimport { FaSearch, FaUserCircle } from \"react-icons/fa\";\n\nconst SearchBar = ({ onFilter }) => {\n  const onSearch = useCallback(\n    (e) => {\n      onFilter(e.target.value);\n    },\n    [onFilter]\n  );\n\n  return (\n    <div className={styles.searchBarContainer}>\n      <div className={styles.avatar}>\n        <FaUserCircle size=\"50px\" color=\"slategrey\" />\n      </div>\n\n      <div className={styles.searchInput}>\n        <FaSearch size=\"12px\" color=\"silver\" />\n\n        <input\n          className={styles.searchInputText}\n          placeholder=\"Search or start new chat\"\n          type=\"text\"\n          onChange={onSearch}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styles from \"./avatar.module.css\";\n\nconst Avatar = ({ src }) => {\n  return <img src={src} alt=\"avatar\" className={styles.avatar} />;\n};\n\nexport default Avatar;\n","import React, { useCallback } from \"react\";\nimport styles from \"./contacts.module.css\";\nimport Avatar from \"../../../components/avatar/avatar\";\n\nconst formatTime = (msec) => {\n  const date = new Date(msec);\n  return date.toDateString();\n};\n\nconst Contacts = ({ chatsArray, activeChat, setActiveChat }) => {\n  const handleClick = useCallback(\n    (chat) => {\n      setActiveChat(chat);\n    },\n    [setActiveChat]\n  );\n\n  return (\n    <div className={styles.contactsContainer}>\n      <p>Chats</p>\n      {/* renders all dialogs */}\n      {chatsArray.map((chat) => {\n        const { person, messages } = chat;\n\n        // selected chat row\n        let className = styles.messageContainer;\n        if (person.id === activeChat.person.id) {\n          className += \" \" + styles.messageContainerActive;\n        }\n\n        // renders one dialog line on the left side\n        return (\n          <div\n            key={person.id}\n            className={className}\n            onClick={() => handleClick(chat)}\n          >\n            <div className={styles.contentWrapper}>\n              <Avatar src={person.icon} />\n              <div className={styles.content}>\n                <div>{person.name}</div>\n                {/* check if we have messages */}\n                {messages.length > 0 && (\n                  <div className={styles.message}>\n                    {/* then show the last message */}\n                    {messages[messages.length - 1].message}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {messages.length > 0 && (\n              <div className={styles.date}>\n                {/* get formatted time of last message */}\n                {formatTime(messages[messages.length - 1].timestamp)}\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport styles from \"./left-side.module.css\";\n\nimport SearchBar from \"./search-bar/search-bar\";\nimport Contacts from \"./contacts/contacts\";\n\nconst LeftSide = ({ chatsArray, activeChat, setActiveChat }) => {\n  // initially show full list of chats on left side\n  const [filteredList, setFilteredList] = useState(chatsArray);\n\n  useEffect(() => {\n    setFilteredList(chatsArray);\n  }, [chatsArray]);\n\n  const onFilter = useCallback(\n    (searchInputValue) => {\n      if (searchInputValue === \"\") {\n        setFilteredList(chatsArray);\n      } else {\n        const filtered = [];\n        // chat is an object with two properties: person and messages\n        chatsArray.forEach((chat) => {\n          // get persons by name\n          const name = chat.person.name;\n          if (name.toLowerCase().includes(searchInputValue.toLowerCase())) {\n            filtered.push(chat);\n          }\n        });\n\n        setFilteredList(filtered);\n      }\n    },\n    [chatsArray]\n  );\n\n  return (\n    <div className={styles.containerLeftSide}>\n      <SearchBar onFilter={onFilter} />\n      <Contacts\n        chatsArray={filteredList}\n        activeChat={activeChat}\n        setActiveChat={setActiveChat}\n      />\n    </div>\n  );\n};\n\nexport default LeftSide;\n","import React from \"react\";\nimport styles from \"./header.module.css\";\nimport Avatar from \"../../../components/avatar/avatar\";\n\nconst Header = ({ person }) => {\n  return (\n    <div className={styles.headerContainer}>\n      <Avatar src={person.icon} />\n      <span>{person.name}</span>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport styles from \"./chat-content.module.css\";\nimport Avatar from \"../../../components/avatar/avatar\";\n\nconst formatTime = (msec) => {\n  const date = new Date(msec);\n  return date.toLocaleString();\n};\n\nconst ChatContent = ({ activeChat: { messages, person } }) => {\n  return (\n    <div className={styles.chatContainer}>\n      {messages?.map((msgObj) => {\n        if (!msgObj) {\n          return null;\n        }\n        if (msgObj.type === \"received\") {\n          return (\n            <div key={msgObj.id} className={styles.receivedWrapper}>\n              <div className={styles.messageDetails}>\n                <Avatar src={person?.icon} />\n                <div className={styles.textReceived}>{msgObj.message}</div>\n              </div>\n              <div className={styles.timeReceived}>\n                {formatTime(msgObj.timestamp)}\n              </div>\n            </div>\n          );\n        }\n\n        return (\n          <div key={msgObj.id} className={styles.sentWrapper}>\n            <div className={styles.textSent}>{msgObj.message}</div>\n            <div className={styles.timeSent}>\n              {formatTime(msgObj.timestamp)}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ChatContent;\n","async function getRandomJoke() {\n  return await fetch(`https://api.chucknorris.io/jokes/random`);\n}\n\nexport { getRandomJoke };\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styles from \"./message-bar.module.css\";\n\nimport { MdSend } from \"react-icons/md\";\nimport { getRandomJoke } from \"../../../services/mc-service\";\n\nconst MessageBar = ({ addNewMessage, activeChat }) => {\n  const input = useRef(null);\n  const [joke, setJoke] = useState({});\n\n  useEffect(() => {\n    addNewMessage(joke.joke, \"received\", joke.pId);\n  }, [joke]);\n\n  const getJokes = useCallback(\n    (pId) =>\n      setTimeout(() => {\n        getRandomJoke()\n          .then((r) => r.json())\n          .then((resp) => {\n            setJoke({ pId, joke: resp.value });\n          });\n      }, 5000),\n    []\n  );\n\n  useEffect(() => {\n    input.current.value = \"\";\n  }, [activeChat.person.id]);\n\n  const addMsgHandler = useCallback(() => {\n    addNewMessage(input.current.value, \"sent\", activeChat.person.id);\n    input.current.value = \"\";\n    getJokes(activeChat.person.id);\n  }, [activeChat.person.id, addNewMessage, getJokes]);\n\n  const onClick = useCallback(() => {\n    if (input.current.value !== \"\") {\n      addMsgHandler();\n    }\n  }, [addMsgHandler]);\n\n  const onKeyDown = useCallback(\n    (e) => {\n      if (input.current.value !== \"\" && e.key === \"Enter\") {\n        addMsgHandler();\n      }\n    },\n    [addMsgHandler]\n  );\n\n  return (\n    <div className={styles.messageContainer}>\n      <div className={styles.sendInput}>\n        <MdSend size=\"20px\" color=\"slategrey\" onClick={onClick} />\n\n        <input\n          ref={input}\n          onKeyDown={onKeyDown}\n          className={styles.sendInputText}\n          placeholder=\"Type your message\"\n          type=\"text\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MessageBar;\n","import React from \"react\";\nimport styles from \"./chat.module.css\";\nimport Header from \"./header/header\";\nimport ChatContent from \"./chat-content/chat-content\";\nimport MessageBar from \"./message-bar/message-bar\";\n\nconst Chat = ({ activeChat, addNewMessage }) => {\n  return (\n    <div className={styles.container}>\n      <Header person={activeChat.person} />\n      <ChatContent activeChat={activeChat} addNewMessage={addNewMessage} />\n      <MessageBar activeChat={activeChat} addNewMessage={addNewMessage} />\n    </div>\n  );\n};\n\nexport default Chat;\n","import React, { useCallback, useState } from \"react\";\nimport LeftSide from \"./modules/left-side/left-side\";\nimport Chat from \"./modules/chat/chat\";\nimport ChatData from \"./data/chats.json\";\n\nimport styles from \"./App.module.css\";\n\n// sort chats by last message on the left side\nconst chatsSort = (chats) => {\n  return chats.sort((a, b) => {\n    return (\n      b.messages[b.messages.length - 1].timestamp -\n      a.messages[a.messages.length - 1].timestamp\n    );\n  });\n};\n\n// save data to local storage\nconst STORAGE_ID = \"local-chats\";\nconst localChatsString = localStorage.getItem(STORAGE_ID);\nconst localChats = localChatsString ? JSON.parse(localChatsString) : undefined;\n\nconst App = () => {\n  // initially first time data comes from chats.json\n  // and after every next page reload from local storage\n  const [chatsArray, setChatsArray] = useState(localChats || ChatData.chats);\n  // every time we reload the page the very first chat will be active\n  const [activeChat, setActiveChat] = useState(chatsArray[0]);\n\n  // function for updating state with new message\n  const onChatsUpdate = useCallback(\n    (updatedChats) => {\n      const sortResults = chatsSort(updatedChats);\n      // updating local storage with new sorting result\n      localStorage.setItem(STORAGE_ID, JSON.stringify(sortResults));\n      // updating state with new sorted chats\n      setChatsArray(sortResults);\n\n      // find active chat on the right side\n      const nextActiveChat = updatedChats.find(\n        (chat) => chat.person.id === activeChat.person.id\n      );\n      // update chat messages for currently active chat (show last added message)\n      setActiveChat(nextActiveChat);\n    },\n    [activeChat.person.id]\n  );\n\n  // both for received and sent messages\n  const addNewMessage = useCallback(\n    (msg, msgType, personID) => {\n      const updatedChats = [];\n\n      // iterate over all chats\n      chatsArray.forEach((chatData) => {\n        // find the person who get or send a new message\n        if (chatData.person.id === personID) {\n          const timestamp = +new Date();\n\n          const newMessage = {\n            id: timestamp,\n            message: msg,\n            timestamp,\n            type: msgType,\n          };\n          // add new message to messages array of chatsArray\n          chatData.messages.push(newMessage);\n        }\n        // add new data to updatedChats\n        updatedChats.push(chatData);\n      });\n      onChatsUpdate(updatedChats);\n    },\n    [chatsArray, onChatsUpdate]\n  );\n\n  return (\n    <div className={styles.App}>\n      <LeftSide\n        chatsArray={chatsArray}\n        activeChat={activeChat}\n        setActiveChat={setActiveChat}\n      />\n      <Chat activeChat={activeChat} addNewMessage={addNewMessage} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}